#!/bin/bash
#
# Copyright (C) 2013-2014 eNovance SAS <licensing@enovance.com>
#
# Author: Frederic Lepied <frederic.lepied@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# Default behavior if install succeed
ONSUCCESS="reboot"
ONFAILURE="halt"
VERBOSE=0
IP="all:dhcp"

mknod /dev/null c 1 3

. /init.common
exec 3>&1
exec 4>&2

exec >> /log 2>&1

tail -f /log > /dev/console &
tpid=$!


################################################################################

set_path

step "Create directories"
create_main_directories
rm -rf /var/lock
mkdir -p /var/lock

step "Mounting virtual fs"
mount_virtual_fs

get_system_info

step "Booting environment"
cat /proc/cmdline
uname -a

step "Spawing new shell on tty2"
openvt /bin/bash

eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^DEBUG=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^VERBOSE=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^ONSUCCESS=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^ONFAILURE=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^KEXEC_KERNEL=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^EMBEDDED=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^IP=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^UPLOAD_LOG=")

if [[ "$DEBUG" = "1" ]]; then
  log "DEBUG param deprecated, please use ONFAILURE=console"
  ONFAILURE="console"
fi

if [ "$VERBOSE" = 1 ]; then
    set -x			# show commands
fi

grep -q '\<quiet\>' /proc/cmdline || log "Loading, please wait..."

probe_kernel_modules

step "Starting services"
if [ -x /etc/init.d/sysklogd ]; then
    /etc/init.d/sysklogd start
fi

if [ -x /etc/init.d/klogd ]; then
    /etc/init.d/klogd start
fi

# It's all over netlink now
echo "" > /proc/sys/kernel/hotplug

start_udev

start_mcelog

# On RHEL7, we need lvmetad to run to make {lv}* commands working
if [ -x /sbin/lvmetad ]; then
    lvmetad
fi
################################################################################
# Hardware detection starts here
################################################################################

probe_pci_devices

step "Starting networking"

if [ "$DEBUG" = 1 ]; then
    start_ssh_server
fi

probe_network_devices

ip a

# This is the default value for both SERV & RSERV
SERV=10.0.0.1
HSERV=
HSERV_PORT=80
RSERV=
RSERV_PORT=873
HTTP_PORT=80
HTTP_PATH=/cgi-bin/
HPATH=install
RPATH=install
SECTION=SERVER
DISCO=
NO_CLOUD_INIT=

# Unless you override one or the other via the cmdline
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^[HR]?SERV=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^[HR]?SERV_PORT=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^HTTP_PORT=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^HTTP_PATH=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^[HR]PATH=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^SECTION=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^DISCO=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^NO_CLOUD_INIT=")

if [ -z "$RSERV" ]; then
    RSERV="$SERV"
fi

get_config_from_cloudinit

################################################################################
step "Detecting hardware"

cd /
run_detect

show_kernel_modules
################################################################################
# Send the detected hardware to the server and receive a configuration script
# if there is a match on the server else stop.
################################################################################

show_git_rev

if [ -n "$EMBEDDED" ]; then
    EMBEDDED_MOUNT=/flash
    export EMBEDDED_MOUNT
    mount_embedded
    mkdir -p $EMBEDDED_MOUNT/var/lib/edeploy/config/hw/
    dmesg > $EMBEDDED_MOUNT/var/lib/edeploy/config/logs/${vendor}-${product}-${serial}.dmesg
    mkdir -p /etc/
    cp -a $EMBEDDED_MOUNT/etc/* /etc
    do_python "/upload.py -f /hw.json" > /configure
elif [ -n "$DISCO" ]; then
    step "Sending data to discoverd using ${DISCO}"
    # discoverd expect the data to be in a dictionary
    echo "{\"data\": $(cat /hw.json)}" > /discoverd.json
    discoverd_request POST "${DISCO}" @/discoverd.json
else
    step "Configuring system via server ${SERV}"
    curl -s -S -o/configure -F section=${SECTION} -F file=@/hw.json http://${SERV}:${HTTP_PORT}/${HTTP_PATH}/upload.py &
    # Saving curl's PID
    PID="$!"

    log_n "Awaiting eDeploy server :"
    while [ ! -z "$(pidof curl)" ]; do
        log_n "."
        sleep 1
    done
    log "done"

    # Let's grab curl's return code based on it's pid
    wait $PID
    RET_CODE=$?
    if [ "$RET_CODE" != "0" ]; then
        give_up "Curl exited as failed ($RET_CODE). Cannot get a configuration from http://${SERV}:${HTTP_PORT}/${HTTP_PATH}/upload.py'"
    fi
fi

if [ ! -f /configure ]; then
    if [ -n "$DISCO" ]; then
        case "$ONSUCCESS" in
            "reboot")
                log "Automatic rebooting as required by ONSUCCESS"
                do_reboot
                ;;
            "halt")
                log "Automatic poweroff as required by ONSUCCESS"
                do_halt
                ;;
            "console")
                log "ONSUCCESS=console, launching an interactive shell"
                do_console
                ;;
            *)
                give_up "Unsupported ONSUCCESS=$ONSUCCESS value"
                ;;
        esac
    else
        give_up "edeploy server ${SERV} didn't provide any answer, looks like something is wrong on server side !"
    fi
fi

# If the configure features a PROFILE then we can report to the edeploy server a failure
PROFILE=$(grep "EDEPLOY_PROFILE" /configure | cut -d "=" -f 2 | tr -d ' ')
if [ -n "$PROFILE" ]; then
    CAN_REPORT_FAILURE=1
fi

chmod +x /configure

d=/chroot
p=/post_rsync

mkdir -p $d
mkdir -p $p/etc/{init,network,default}

log "Starting configuration of profile $PROFILE"

if /configure; then

    . /vars

    if [ -n "$ROLE" -a -n "$VERS" ]; then
        log "Deploying role '$ROLE' version '$VERS' on disk '$DISK' @ $(date)"
        if [ -n "$EMBEDDED" ]; then
            log "Installing OS using embedded method"
            cat $EMBEDDED_MOUNT/embedded/${ROLE}-${VERS}.edeploy | gzip -d | tar x -C $d || give_up "Unable to decompress local role : $EMBEDDED_MOUNT/embedded/${ROLE}-${VERS}.edeploy"
        elif [ -n "$HSERV" ]; then
            log "Transferring files from http://${HSERV}:${HSERV_PORT}/${HPATH}/${VERS}/${ROLE}-${VERS}.edeploy..."
            curl -s -S http://${HSERV}:${HSERV_PORT}/${HPATH}/${VERS}/${ROLE}-${VERS}.edeploy | gzip -d | tar x -C $d || give_up "Unable to download http://${HSERV}:${HSERV_PORT}/${HPATH}/${VERS}/${ROLE}-${VERS}.edeploy"
        else
            log "Copying files from rsync://${RSERV}:${RSERV_PORT}/${RPATH}/${VERS}/${ROLE}..."
            rsync -a rsync://${RSERV}:${RSERV_PORT}/${RPATH}/${VERS}/${ROLE}/ $d/ || give_up "Unable to rsync rsync://${RSERV}:${RSERV_PORT}/${RPATH}/${VERS}/${ROLE}/"
        fi
        echo "SERV=${SERV}" >> $d/var/lib/edeploy/conf
        echo "RSERV=${RSERV}" >> $d/var/lib/edeploy/conf
        echo "RPATH=${RPATH}" >> $d/var/lib/edeploy/conf
        echo "RSERV_PORT=${RSERV_PORT}" >> $d/var/lib/edeploy/conf
        sed -i "s/ROLE=.*/ROLE=${ROLE}/" $d/var/lib/edeploy/conf
        sed -i "s/Role .*/Role ${ROLE}/" $d/etc/motd
        log "OS installation completed"

        log "Installing post_rsync files"
        rsync -avHP $p/* $d/

        if [ -r /modules ]; then
            cat /modules >> $d/etc/modules
        fi

        cmdline=$(cat /proc/cmdline)
        # If the cmdline have some "| xxxx |" it means that we have some arguments to keep at install time
        echo $cmdline | grep -q "|" && BOOT_ARG=$(echo $cmdline | cut -d "|" -f 2,2)

        if [ -n "${METADATA_URL}" ]; then
            log "Setting up cloudinit with METADATAURL=$METADATA_URL"
            ORIGINAL_BOOT_ARG=$BOOT_ARG
            BOOT_ARG="$BOOT_ARG ds=nocloud-net\\\;s=${METADATA_URL}"
            BOOT_ARG1="$ORIGINAL_BOOT_ARG ds=nocloud-net;s=${METADATA_URL}"
        else
            BOOT_ARG1="$ORIGINAL_BOOT_ARG"
            log "No METADATA_URL variable found, no cloud-init configuration done"
        fi

        mount -obind /dev $d/dev
        mount -obind /proc $d/proc
        mount -obind /sys $d/sys
        mount -obind /run $d/run

        if [ -d $d/var/log ]; then
            mkdir -p $d/var/log/edeploy
            cp -p /log $d/var/log/edeploy/install.log
            cp -p /vars /hw.json $d/var/log/edeploy
            cp -p /configure $d/var/log/edeploy
            dmesg > $d/var/log/edeploy/dmesg
        fi

        # If the disk name doesn't have any /dev/ naming let's add it
        echo "$DISK" | grep '^/dev/' || DISK="/dev/$DISK"
        export DISK
        DISK_BASE=$(basename $DISK)
        SER=$(cat /sys/block/$DISK_BASE/device/rev)
        MODEL=$(cat /sys/block/$DISK_BASE/device/model)
        VENDOR=$(cat /sys/block/$DISK_BASE/device/vendor)
        echo  "################################################################################################"
        echo  "# Installing grub on device ${DISK} which is a $MODEL from $VENDOR with SN=$SER"
        echo  "# Additional boot arguments are : $BOOT_ARG"
        echo  "################################################################################################"
        # grub1 doesn't have /usr/sbin/grub-mkconfig
        if [ ! -x $d/usr/sbin/grub-mkconfig -a ! -x $d/usr/sbin/grub2-mkconfig ]; then
            chroot $d /bin/sh -c "cat /proc/mounts > /etc/mtab"
            chroot $d /bin/sh -c "/sbin/grub-install ${DISK}"
            ret=$?

            rm -f $d/etc/mtab

            root=`mount | grep "$d " | awk '{print $1}'`
            eval `blkid $root -o export`
            echo "default=0"  > ${d}/boot/grub/grub.conf
            echo "timeout=5" >> ${d}/boot/grub/grub.conf
            echo "hiddenmenu">> ${d}/boot/grub/grub.conf

            echo "PROMPT 1" > ${d}/boot/extlinux.conf
            echo "TOTALTIMEOUT 100" >> ${d}/boot/extlinux.conf
            DEFAULT_BOOT_PARTITION=0

            # Does /boot have a separate partition ?
            mountpoint -q ${d}/boot
            NO_BOOT_MOUNTPOINT=$?
            # Yes it's split, so let's compute its partition number for grub
            if [ $NO_BOOT_MOUNTPOINT -eq 0 ]; then
                PART_NUM=$(basename $(grep "${d}/boot" /proc/mounts  | awk '{print $1}')| sed -e 's/[a-z]*\(.*\)/\1/g')
                DEFAULT_BOOT_PARTITION=$(($PART_NUM - 1))
            fi

            DISTRO_NAME=$(chroot $d lsb_release -d |  awk '{ print substr($0, index($0,$2)) }')
            kernel_count=0
            for kernel in ${d}/boot/vmlinuz-*; do
                kversion=`echo $kernel | awk -F'vmlinuz-' '{print $NF}'`;
                # If /boot is splitted, we shall not prefix with /boot
                if [ $NO_BOOT_MOUNTPOINT -eq 0 ]; then
                    KERNEL="/vmlinuz-${kversion}"
                    INITRD="/initramfs-${kversion}.img"
                else
                    KERNEL="/boot/vmlinuz-${kversion}"
                    INITRD="/boot/initramfs-${kversion}.img"
                fi
                TITLE="$DISTRO_NAME (${kversion})"
                ARGS="root=UUID=$UUID nomodeset rw $BOOT_ARG1"
                echo "title $TITLE" >> ${d}/boot/grub/grub.conf
                echo "	root (hd0,$DEFAULT_BOOT_PARTITION)" >> ${d}/boot/grub/grub.conf
                echo "	kernel $KERNEL $ARGS" >> ${d}/boot/grub/grub.conf
                echo "	initrd $INITRD" >> ${d}/boot/grub/grub.conf

                if [ "$kernel_count" = "0" ]; then
                    echo "DEFAULT $TITLE" >> ${d}/boot/extlinux.conf
                fi
                echo "LABEL $TITLE" >> ${d}/boot/extlinux.conf
                echo "  kernel $KERNEL" >> ${d}/boot/extlinux.conf
                echo "  initrd $INITRD" >> ${d}/boot/extlinux.conf
                echo "  append $ARGS" >> ${d}/boot/extlinux.conf
                kernel_count=$(($kernel_count + 1))
            done

            log "$kernel_count kernels configured"

            # Setting up a quirk list where extlinux is mandatory, this will override the grub install
            log "Checking if product ($product) requires extlinux"
            case "$product" in
                ProLiant-DL120-G7|ProLiant-DL360p-Gen8)
                    log "Installing extlinux to workaround grub1 issues"
                    extlinux --install ${d}/boot && dd if=/mbr.bin of=${DISK} conv=notrunc
                 ;;
            esac
            # grub 2
        else
            if [ -x $d/usr/sbin/grub2-install ]; then
                V=2
            else
                V=
            fi
            if chroot $d /bin/sh -c "/usr/sbin/grub$V-install ${DISK}"; then
                if [ -r $d/etc/default/grub ]; then
                    sed -i -e "s@GRUB_CMDLINE_LINUX_DEFAULT=\"\{0,1\}\([^\"]*\)\"\{0,1\}@GRUB_CMDLINE_LINUX_DEFAULT=\"\1 ${BOOT_ARG}\"@" $d/etc/default/grub
                else
                    echo "GRUB_CMDLINE_LINUX_DEFAULT=\"${BOOT_ARG}\"" > $d/etc/default/grub
                fi
                # tell GRUB2 to preload its "lvm" module to gain LVM booting on direct-attached disks
                if [ "$V" = "2" ]; then
                    echo "GRUB_PRELOAD_MODULES=lvm" >> $d/etc/default/grub
                fi
                chroot $d /bin/sh -c "/usr/sbin/grub$V-mkconfig -o /boot/grub$V/grub.cfg"
                ret=$?
            else
                ret=1
            fi
        fi
        # Bootloader successfully installed
        if [ $ret -eq 0 ]; then
            # Ask pxemngr to boot locally on the next PXE boot
            if [ -n "$PXEMNGR_URL" ]; then
                curl -s ${PXEMNGR_URL}localboot/
            fi

            umount $d/run
            umount $d/sys
            umount $d/dev
            umount $d/proc
            save_log
            log "Syncing data to disk in progress ..."
            sync
            log "Data syncing done."

            case "$ONSUCCESS" in
                "kexec")
                    log "Booting with kexec as required by ONSUCCESS"
                    if type -p kexec; then
                        log_n "Trying kexec..."
                        KVER=""
                        NB_KERNELS=$(find $d/boot/ -name "vmlinuz*" -type f | wc -l)
                        if [ "$NB_KERNELS" -gt 1 ]; then
                            log "."
                            log "Kexec: Multiple kernels found :"
                            KERNEL_LIST=$(find $d/boot/ -name "vmlinuz*" -type f  | sed -e "s/.*vmlinuz-\(.*\)/\1/g")
                            log "$KERNEL_LIST"
                            if [ -z "$KEXEC_KERNEL" ]; then
                                KVER=$(echo $KERNEL_LIST | awk '{print $1}')
                                log "Kexec: no KEXEC_KERNEL variable defined."
                                log "Kexec: Selecting first kernel version : $KVER"
                            else
                                KVER=$KEXEC_KERNEL
                                log "Kexec: Using user defined kernel version : $KVER"
                            fi
                        fi

                        cp $d/boot/vmlinuz*$KVER* /tmp/vmlinuz || give_up "Kexec: Unable to copy kernel"
                        if ls $d/boot/initrd*$KVER* &>/dev/null; then
                            cp $d/boot/initrd*$KVER* /tmp/initrd.img || give_up "Kexec: Unable to copy initrd"
                        else
                            cp $d/boot/initramfs*$KVER* /tmp/initrd.img || give_up "Kexec: Unable to copy initrd"
                        fi

                        eval $(grep root=UUID= $d/boot/grub/grub.cfg|head -1|tr ' ' '\n'|grep '^root=UUID=')
                        if [ -z "$root" ]; then
                            log "Kexec: using alternative root detection"
                            root=$(grep 'root=' $d/boot/grub/grub.cfg | grep vmlinuz | head -1 | sed -e 's/.*root=\(.*\)/\1/g' | awk '{print $1}')
                        fi

                        umount $d/boot
                        umount $d

                        # Adding console= parameters taken from bootstrap cmdline if none already defined
                        echo $BOOT_ARG | grep -qw "console=" || for console in $(grep -oh "console=\w*" /proc/cmdline); do
                            log "Adding $console boot argument as defined in bootstrap cmdline"
                            BOOT_ARG="$BOOT_ARG $console";
                        done

                        if [ -z "$root" ]; then
                            give_up "Kexec: Cannot be executed as no root device found"
                            sleep 5
                        else
                            log "Kexec: Starting with append=root=${root}${BOOT_ARG}"
                            upload_log
                            kexec -l /tmp/vmlinuz --initrd=/tmp/initrd.img --append="root=${root}${BOOT_ARG}"
                            kexec -e
                        fi
                    else
                        give_up "ONSUCCESS=kexec but no kexec found !"
                    fi
                    ;;
                "reboot")
                    log "Automatic rebooting as required by ONSUCCESS"
                    do_reboot
                    ;;
                "halt")
                    log "Automatic poweroff as required by ONSUCCESS"
                    do_halt
                    ;;
                "console")
                    log "ONSUCCESS=console, launching an interactive shell"
                    do_console
                    ;;
                *)
                    give_up "Unsupported ONSUCCESS=$ONSUCCESS value"
                    ;;
            esac
        else
            give_up "Install of grub failed"
        fi
    else
        give_up "No role or version defined..."
    fi
else
    grep '<!-- ' /configure -A 40 >> /log
    give_up "Problem during system configuration"
fi
