#!/bin/bash
#
# Copyright (C) 2013-2014 eNovance SAS <licensing@enovance.com>
#
# Author: Frederic Lepied <frederic.lepied@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

progname="$0"
TEST_UPGRADE=0
EDEPLOY_DIR=/var/lib/edeploy
EDEPLOY_LOG=/var/log/edeploy
RPATH=install

if [ -r ${EDEPLOY_DIR}/conf ]; then
    . ${EDEPLOY_DIR}/conf
fi

if [ -r ${EDEPLOY_LOG}/vars ]; then
    eval "$(grep '^PROFILE=' ${EDEPLOY_LOG}/vars)"
fi

function test-upgrade() {
    TEST_UPGRADE=1
    upgrade $@
}

function update_metadata() {
    ROLE_TO_UPDATE=$1
    if [ ! -d ${EDEPLOY_DIR} ]; then
        mkdir -p ${EDEPLOY_DIR}
    fi
    rsync -a rsync://${RSERV}:${RSERV_PORT}/metadata/${VERS}/${ROLE}/${TARGET}/ ${EDEPLOY_DIR}/${ROLE_TO_UPDATE}/
}

function upgrade() {
    TARGET="$1"
    if [ -z "$TARGET" ]; then
        echo "Usage: $progname upgrade <target version>" 1>&2
        echo "Missing <target version> ! Exiting !"
        exit 1
    fi

    set -e
    set -x

    update_metadata $TARGET

    cd ${EDEPLOY_DIR}/${TARGET}/

    if [ ! -f exclude ]; then
        echo "No exclude file found, trying to upgrade would destroy your setup by rsyncing empty directories"
        echo "Canceling upgrade"
        exit 1
    fi

    if [ ! -s add_only ]; then
        echo "'add_only' file is non-existing or empty. This is an error and will lead to some rsync troubles"
        echo "'add_only' file is auto-generated by edeploy, it should exist and contain at least '- *'"
        echo "Canceling upgrade"
        exit 1
    fi

    # If we run a test upgrade, let's just show what the rsync would have change on the server
    if [ "$TEST_UPGRADE" = "1" ]; then
        rsync --dry-run -avi --numeric-ids --delete-after --exclude-from=exclude rsync://${RSERV}:${RSERV_PORT}/${RPATH}/${TARGET}/${ROLE}/ /
        rsync --dry-run -avi --numeric-ids --ignore-existing --include-from=add_only rsync://${RSERV}:${RSERV_PORT}/${RPATH}/${TARGET}/${ROLE}/ /
        return 0
    fi

    if [ -x pre ]; then
        ./pre
    fi

    rsync -av --numeric-ids --delete-after --exclude-from=exclude rsync://${RSERV}:${RSERV_PORT}/${RPATH}/${TARGET}/${ROLE}/ / > ${EDEPLOY_DIR}/rsync_${VERS}_${TARGET}.out
    rsync -av --numeric-ids --ignore-existing --include-from=add_only rsync://${RSERV}:${RSERV_PORT}/${RPATH}/${TARGET}/${ROLE}/ / >> ${EDEPLOY_DIR}/rsync_${VERS}_${TARGET}.out

    set +e

    if [ -x post ]; then
        ./post
        RET=$?
    fi

    echo -e "\nVersion ${TARGET}\n" > /etc/motd
    echo -e "VERS=${TARGET}\nROLE=${ROLE}\nRSERV=${RSERV}\nRSERV_PORT=${RSERV_PORT}\nRPATH=${RPATH}\n" > ${EDEPLOY_DIR}/conf

    echo "Upgraded to $TARGET"

    if [ "$RET" = "100" ]; then
        echo "Reboot requested by the upgrade process..."
        sync
        sleep 2
        reboot
    fi
}

function list() {
    rsync rsync://${RSERV}:${RSERV_PORT}/metadata/${VERS}/${ROLE}/ 2> /dev/null > tempfile
    if [ "$?" != "0" ]; then
        echo "No upgrade found for role '$ROLE' version $VERS on server $RSERV"
        exit 1
    fi
    cat tempfile | sed -e 's/.* //' | grep -v '^\.$' | grep -v '^\.$'
    rm -f tempfile
}

function verify() {
    update_metadata $VERS

    if [ -r ${EDEPLOY_DIR}/$VERS/exclude ]; then
        EXCLUDE=--exclude-from=${EDEPLOY_DIR}/$VERS/exclude
    fi

    rsync --dry-run -avi --delete-after $EXCLUDE rsync://${RSERV}:${RSERV_PORT}/${RPATH}/${VERS}/${ROLE}/ /
}

function version() {
    echo $VERS
}

function role() {
    echo $ROLE
}

function profile() {
    echo $PROFILE
}

function check_args() {
    if [ -z "$VERS" -o -z "$ROLE" -o -z "$RSERV" -o -z "$RSERV_PORT" ]; then
        echo "${EDEPLOY_DIR}/conf must contain RSERV, VERS, ROLE and RSERV_PORT" 1>&2
        exit 1
    fi
    # Do not add a test for PROFILE because we don't want to fail: some cases
    # don't need PROFILE.
    # ex: when booting an image directly from LXC or OpenStack Heat.
}

function activate-pkgmngr() {
    for pkgmngr in apt-get yum; do
        if [ ! -L /usr/bin/${pkgmngr} ]; then
            mv -f /usr/bin/${pkgmngr} /usr/bin/${pkgmngr}.real
        fi
        ln -sf /usr/bin/${pkgmngr}.real /usr/bin/${pkgmngr}
    done
}

function deactivate-pkgmngr() {
    cat > /usr/bin/pkgmngr.edeploy <<EOF
#!/bin/sh

echo "\$(basename \$0) is deactivated. Use \"edeploy activate-pkgmngr\" to bring it back."
exit 0
EOF
    chmod a+x /usr/bin/pkgmngr.edeploy
    for pkgmngr in apt-get yum; do
        if [ ! -L /usr/bin/${pkgmngr} ]; then
            mv -f /usr/bin/${pkgmngr} /usr/bin/${pkgmngr}.real
        fi
        ln -sf /usr/bin/pkgmngr.edeploy /usr/bin/${pkgmngr}
    done
}

function help() {
    usage
    cat <<EOF

    upgrade: launch the upgrade process to version <target version>.

    test-upgrade: launch a dry run of the upgrade process to version <target version>.

    list: list the available target versions on the server.

    verify: verify the modified files regarding the version on the server.

    version: show the guest current version.

    role: show the role the guest has been setup as.

    profile: show the profile the guest has been setup as.

    activate-pkgmngr: activate the package manager

    deactivate-pkgmngr: deactivate the package manager

    help: display this help message.
EOF
}

function usage() {
    echo "Usage: $progname ({test-}upgrade <target version>|list|verify|help|version|role|profile|activate-pkgmngr|deactivate-pkgmngr)"
}

command="$1"
shift

case "$command" in
    help)
        help
        ;;
    test-upgrade|upgrade|list|verify|version|role|profile)
        check_args
        "$command" "$@"
        ;;

    activate-pkgmngr|deactivate-pkgmngr)
        "$command" "$@"
        ;;
    *)
        usage 1>&2
        exit 1
        ;;
esac

