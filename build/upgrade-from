#!/bin/bash
#
# Copyright (C) 2013-2014 eNovance SAS <licensing@enovance.com>
#
# Author: Frederic Lepied <frederic.lepied@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

BASE="$0"
ROLE="$1"
FROM="$2"
TO="$3"
DEST="$4"
DIST="NODIST"

ORIG=$(cd $(dirname $0); pwd)
FDIR=${DEST}/install/${FROM}/${ROLE}
TDIR=${DEST}/install/${TO}/${ROLE}
METADATA_DIR=${ORIG}/../metadata/${FROM}/${ROLE}/${TO}
EXCLUDE_FILE=${METADATA_DIR}/exclude
ADD_ONLY_FILE=${METADATA_DIR}/add_only

# for compatibility with cleanup and common_setup from common
dir=${TDIR}
version=${TO}

. $ORIG/common

setup_add_only() {
    if [ ! -f $ADD_ONLY_FILE ]; then
        PRIOR_ADD=$(find ${ORIG}/../metadata/*/${ROLE}/${FROM}/add_only || true)
        if [ ! -z $PRIOR_ADD ]; then
            echo "Found an add_only file for release ${FROM}"
            echo "Let's use it as default for this version too"
            echo "Using $PRIOR_ADD as add_only file"
            cp $PRIOR_ADD $ADD_ONLY_FILE
            return
        fi

        echo "No add_only file found, creating a default one"
        echo "Please check that $ADD_ONLY_FILE file is featuring all directories or files that need to only added"
        echo "Any mistake in this file could lead to a bad upgrade path and damage setup"
        touch $ADD_ONLY_FILE
        cat >> $ADD_ONLY_FILE << EOF
+ /var/
+ /var/**
- *
EOF
    fi
}
setup_exclude() {
    if [ ! -f $EXCLUDE_FILE ]; then
        PRIOR_EXCLUDE=$(find ${ORIG}/../metadata/*/${ROLE}/${FROM}/exclude || true)
        if [ ! -z $PRIOR_EXCLUDE ]; then
            echo "Found an exclude file for release ${FROM}"
            echo "Let's use it as default for this version too"
            echo "Using $PRIOR_EXCLUDE as exclude file"
            cp $PRIOR_EXCLUDE $EXCLUDE_FILE
            return
        fi

        echo "No exclude file found, creating a default one"
        echo "Please check that $EXCLUDE_FILE file is featuring all directories or files to ignore during rsync"
        echo "Any mistake in this file could lead to a bad upgrade path and damage setup"
        touch $EXCLUDE_FILE
        cat >> $EXCLUDE_FILE << EOF
/dev/
/proc/
/sys/
/mnt/
/run/
/tmp/
/home/
/root/
+ /var
- /var/lib/edeploy/*
- /var/log/
- /var/cache/
/boot/grub/
/lost+found
/etc/hostname
/etc/rc.local*
/etc/network/
/etc/fstab
/etc/mtab
/etc/shadow
/etc/ld.so.cache
/etc/hosts
/etc/resolv.conf
/etc/ssh/*key
/etc/ssh/ssh_host*
/etc/udev/rules.d/*persistent*
EOF
    fi
}

setup_metadata() {
    if [ ! -d $METADATA_DIR ]; then
        mkdir -p $METADATA_DIR
    fi
    setup_exclude
    setup_add_only
}

if [ $# != 4 ]; then
    echo "Usage: $0 <role> <base version> <new version> <top dir>" 1>&2
    exit 1
fi

if [ ! -d "$FDIR" ]; then
    echo "Source directory $FDIR doesn't exist" 1>&2
    exit 1
fi

set -e

if [ ! -d ${TDIR} ]; then
    mkdir -p ${TDIR}
fi

echo -n "Syncing ${FDIR} to ${TDIR}..."
rsync -a --delete-before ${FDIR}/ ${TDIR}/
echo "done"

common_setup

cp -p ${ORIG}/edeploy ${TDIR}/usr/sbin/

script="$BASE".d/${ROLE}_${FROM}_${TO}.upgrade

if [ -x "$script" ]; then
    ORIG=$ORIG dir=$TDIR "$script"
fi

setup_metadata

mkdir -p ${TDIR}/var/lib/edeploy/${TO}
cp ${METADATA_DIR}/exclude ${TDIR}/var/lib/edeploy/${TO}/exclude

clean_mount_points
clear_trap
